/*!
\page HttpImageUtils-tutorial.html
\title How to Make a Mobile App with Felgo HttpImageUtils

\section1 Introduction

Felgo is a tool for fast creation of cross-platform apps and games.
HttpImagesUtils enhances image uploads by allowing a range of image
transformations before the upload.
This tutorial is about making a mobile app with Felgo HttpImageUtils.

\section1 Setup

Felgo can be downloaded and installed from \l https://felgo.com .
After installation, start the IDE, Qt Creator.
We will start from a template: select \c {File > New File or Project...}
and the Single-Page Application template.
\image new-project.png Create new Felgo project from Single-Page Application template

\section1 Add to the view

The app now shows an image using \uicontrol Image in \c Main.qml.
By adding a \uicontrol PinchArea, it becomes resizeable by a pinch gesture:
\qml
    PinchArea {
        anchors.fill: parent
        pinch.target: img
        pinch.minimumScale: 0.1
        pinch.maximumScale: 3.0
    }
\endqml
\qml
    Image {
        id: img
        source: "../assets/felgo-logo.png"
        anchors.centerIn: parent
    }
\endqml
\c anchors.fill is set so it covers the whole parent (the page).
Setting the \c pinch.target to the image id connects the handled pinch
gestures to the image.

Now we add a button at the bottom to start the upload:
\qml
    AppButton {
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.bottom: parent.bottom
        text: qsTr("Upload")
    }
\endqml
\image basic-ui.png Basic UI

\section1 Add logic and data model

For separation of concerns, we add the application logic and data model
separately. The logic is just a single action to signal that a scaled
image should be uploaded:
\qml
    Item {
        id: logic

        // actions
        signal uploadScaled(int width, int height)
    }
\endqml

The data model manages the data, which will be the path or url of the image.
It is defined in a private sub-item in order to make it only readable
to the outside. We'll use a dummy URL for an image for illustration.
It will also communicate with an \c api to scale and upload the image,
which we will explain in the next section.
To handle the action from the logic, we add a \c Connections component.
\qml
import Felgo 3.0
import QtQuick 2.0

Item {

    // property to configure target dispatcher / logic
    property alias dispatcher: logicConnection.target

    // model data properties
    readonly property alias url: _url

    // action success signals
    signal scaledUploaded(int width, int height)

    // action error signals
    signal uploadScaledFailed(var error)

    // listen to actions from dispatcher
    Connections {
        id: logicConnection

        // action 1 - upload scaled image
        onUploadScaled: {
            api.uploadScaled(url, width, height,
                             function(data) {
                                 if (data.ok) {
                                     scaledUploaded(width, height)
                                 }
                                 else {
                                     uploadScaledFailed("HTTP Response " + data.status)
                                 }
                             },
                             function(error) {
                                 uploadScaledFailed(error)
                             })
        }
    }

    // dummy api for scaled image upload
    Item {
        id: api

        // scale and upload an image
        function uploadScaled(url, width, height, success, error) {
        }
    }

    // private
    Item {
        id: _

        // data properties
        property string url: "https://dummyimage.com/300" // image url
    }
}
\endqml
In order to keep \c Main.qml clean, the data model is put in a separate file
\c DataModel.qml. In the project tree in Qt Creator, right-click the qml folder
and select \c {Add new}.
\image new-file.png Add new data model file
Then select \c Qt and \c {QML File (Qt Quick 2)} and call it \c DataModel .

Now we can add logic and data model to \c Main.qml and connect them:
\qml
    // business logic
    Item {
        id: logic

        // actions
        signal uploadScaled(int width, int height)
    }
\endqml
\qml
    // model
    DataModel {
        id: dataModel
        dispatcher: logic // data model handles actions sent by logic

        // global error handling
        onUploadScaledFailed: nativeUtils.displayMessageBox(qsTr("Failed to upload"), error)
    }
\endqml
We can now connect the button handler to the action from the logic
\qml
                AppButton {
                    anchors.horizontalCenter: parent.horizontalCenter
                    anchors.bottom: parent.bottom
                    text: qsTr("Upload")
                    onClicked: {
                        logic.uploadScaled(img.scale * img.width,
                                           img.scale * img.height)
                    }
                }
\endqml
and the image source to the url in the data model.
\qml
            Image {
                id: img
                source: dataModel.url
                anchors.centerIn: parent
            }
\endqml

\section1 Scale and upload the image using HttpImageUtils and HttpRequest

We now add the code to scale and upload the image:
\qml
    // small api for scaled image upload
    Item {
        id: api

        // configure request timeout
        property int maxRequestTimeout: 5000

        // scale and upload an image
        function uploadScaled(url, width, height, success, error) {
            // download the image
            HttpRequest.get(url)
            .timeout(maxRequestTimeout)
            .then(function(res) {
                // scale the image
                var reader = HttpImageUtils.createReader(res.body)
                reader.setScaledSize(width, height, Image.PreserveAspectFit)
                var scaled = reader.read();
                //upload the scaled image
                HttpRequest.post("http://httpbin.org/post")
                .timeout(maxRequestTimeout)
                .attach('jpg', scaled, 'scaled.jpg')
                .then(function(res) {
                    success(res)
                })
                .catch(function(err) { error(err) });;
            })
            .catch(function(err) { error(err) });
        }
    }
\endqml
The function \c uploadScaled takes as argument the original \c url of the image,
the \c width and \c height to scale it to, and callback functions for success
and error.

First it downloads the image using \c HttpRequest.get() . Then the response is
read using \c HttpImageUtils.reader() and scaled using \c setScaledSize() .

Finally, the scaled image is uploaded to \l http://httpbin.org using
\c HttpRequest.post() . The response is given to \c success() .
In addition, a timeout is set, and errors are caught and given to \c error() .

We can now show a message on successful upload. For this we connect the success
signal of \uicontrol DataModel to a handler in the \uicontrol Page in \c Main.qml .
\qml
            // show a message on successful upload
            Connections {
                target: dataModel
                onScaledUploaded: InputDialog.confirm(app,
                                                      qsTr("Uploaded image scaled to ") +
                                                      width + " x " + height,
                                                      null,
                                                      false)
            }
\endqml
\image message.png Successful scaling and upload

\section1 Add a network activity indicator and change image after each upload

Now we'll improve the UI of the app. First we'll change the image after each
upload in \c DataModel.qml :
\qml
Item {
    //...
    // whether api is busy (ongoing network requests)
    readonly property bool isBusy: HttpNetworkActivityIndicator.enabled

    // listen to actions from dispatcher
    Connections {
        id: logicConnection

        // action 1 - upload scaled image
        onUploadScaled: {
            api.uploadScaled(url, width, height,
                             function(data) {
                                 if (data.ok) {
                                     _.url = _.makeURL()
                                     scaledUploaded(width, height)
                                 }
                                 else {
                                     uploadScaledFailed("HTTP Response " + data.status)
                                 }
                             },
                             function(error) {
                                 uploadScaledFailed(error)
                             })
        }
    }
    //...
}
\endqml
\qml
    // private
    Item {
        id: _

        // data properties
        property string url: makeURL()  // image url

        // generate a random image URL
        function makeURL() {
            return ("https://dummyimage.com/" +
                    utils.generateRandomValueBetween(100, 500) + "x" +
                    utils.generateRandomValueBetween(100, 500) + "/" +
                    utils.randomColor().substr(1) +
                    "&text=Hi!")
        }
    }
\endqml
A new random image URL is generated using the private data model function
\c makeURL() after a successful upload.

We also added the property \c isBusy which uses
\c HttpNetworkActivityIndicator to indicate ongoing network requests.
Now we'll add a network activity indicator to the \uicontrol Page in \c Main.qml
in order to show when the upload is in progress:
\qml
        Page {
            //...
            rightBarItem: NavigationBarRow {
                // network activity indicator
                ActivityIndicatorBarItem {
                    enabled: dataModel.isBusy
                    visible: enabled
                    showItem: showItemAlways // do not collapse into sub-menu on Android
                }
            }
            //...
        }
\endqml

\image better-ui.png Added image change and network activity indicator
*/
