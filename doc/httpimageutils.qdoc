/*!
\page HttpImageUtils-tutorial.html
\title How to Make a Mobile App with Felgo HttpImageUtils

\section1 Introduction

Felgo is a tool for fast creation of cross-platform apps and games.
HttpImagesUtils enhances image uploads by allowing a range of image
transformations before the upload.
This tutorial is about making a mobile app with Felgo HttpImageUtils.

\section1 Setup

Felgo can be downloaded and installed from \l {http://felgo.com} .
After installation, start the IDE, Qt Creator.
We will start from a template: select \c {File > New File or Project...}
and the Single-Page Application template.
\image new-project.png Create new Felgo project from Single-Page Application template

\section1 Add to the view

The app now shows an image using \c Image in \c Main.qml.
By adding a \c PinchArea, it becomes resizeable by a pinch gesture:
\qml
    PinchArea {
        anchors.fill: parent
        pinch.target: img
        pinch.minimumScale: 0.1
        pinch.maximumScale: 3.0
    }
\endqml
\qml
    Image {
        id: img
        source: "../assets/felgo-logo.png"
        anchors.centerIn: parent
    }
\endqml
\c anchors.fill is set so it covers the whole parent (the page).
Setting the \c pinch.target to the image id connects the handled pinch
gestures to the image.

Now we add a button at the bottom to start the upload:
\qml
    AppButton {
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.bottom: parent.bottom
        text: qsTr("Upload")
    }
\endqml
\image basic-ui.png Basic UI

\section1 Add logic and data model

For separation of concerns, we add the application logic and data model
separately. The logic is just a single action to signal that a scaled
image should be uploaded:
\qml
    Item {
        id: logic

        // actions
        signal uploadScaled(int width, int height)
    }
\endqml

The data model manages the data, which will be the path or url of the image.
It is defined in a private sub-item in order to make it only readable
to the outside.
It will also communicate with an \c api to scale and upload the image,
which we will explain later.
To handle the action from the logic, we add a \c Connections component.
\qml
import Felgo 3.0
import QtQuick 2.0

Item {

    // property to configure target dispatcher / logic
    property alias dispatcher: logicConnection.target

    // model data properties
    readonly property alias url: _url

    // action success signals
    signal scaledUploaded(int width, int height)

    // action error signals
    signal uploadScaledFailed(var error)

    // listen to actions from dispatcher
    Connections {
        id: logicConnection

        // action 1 - upload scaled image
        onUploadScaled: {
            api.uploadScaled(url, width, height,
                             function(data) {
                                 if (data.ok) {
                                     scaledUploaded(width, height)
                                 }
                                 else {
                                     uploadScaledFailed("HTTP Response " + data.status)
                                 }
                             },
                             function(error) {
                                 uploadScaledFailed(error)
                             })
        }
    }

    // dummy rest api for scaled image upload
    Item {
        id: api

        // scale and upload an image
        function uploadScaled(url, width, height, success, error) {
        }
    }

    // private
    Item {
        id: _

        // data properties
        property string url: "https://dummyimage.com/300" // image url
    }
}
\endqml
The data model is put in a separate file \c DataModel.qml.
*/
